name: Main

run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

on:
  push:
    # paths-ignore:
      # - ".github/**"

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."

  trigger-deploy-dev:
    name: üöÄ Trigger DEV deploy
    needs: demo
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch event
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_REPO_ACTIONS_PAT }}
          script: |
            await github.rest.repos.createDispatchEvent({
              owner: context.repo.owner,
              repo: 'github-actions-poc-deploy',
              event_type: 'deploy_dev_snapshot',
              client_payload: {
                "target_verison": "1.1.1"
              }
            });

  open-deploy-pr:
    name: üîÄ Open deployment PR
    needs: demo
    if: startsWith(github.ref, 'refs/heads/release/v') || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERSION: "1.2.3"
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          repository: oleksii-suprun/github-actions-poc-deploy
          token: ${{ secrets.DEPLOY_REPO_ACTIONS_PAT }}
          sparse-checkout: state

      - name: ‚ú® Create branch
        id: create-branch
        run: |
          BRANCH_NAME="deploy/${{ github.event.repository.name }}/v${{ env.VERSION }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: ü©π Patch stage version
        if: startsWith(github.ref, 'refs/heads/release/v')
        run: yq e -i '.artifact.version = "${{ env.VERSION }}"' state/stage.yaml

      - name: ü©π Patch prod version
        if: github.ref == 'refs/heads/main'
        run: yq e -i '.artifact.version = "${{ env.VERSION }}"' state/prod.yaml

      - name: ‚¨ÜÔ∏è Commit changes
        run: |
          git add .
          git commit -m "ü§ñ Deploying \`${{ github.event.repository.name }}@v${{ env.VERSION }}\`"
          git push origin ${{ steps.create-branch.outputs.branch }}

      - name: üîÄ Open Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_REPO_ACTIONS_PAT }}
          script: |
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: 'github-actions-poc-deploy',
              head: '${{ steps.create-branch.outputs.branch }}',
              base: 'main',
              title: 'ü§ñ Deploying `${{ github.event.repository.name }}@v${{ env.VERSION }}`',
              body: 'This PR is automatically created by push to [${{ github.event.repository.name }}/${{ github.ref_name }}](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }})\nCommit SHA: `${{ github.sha }}`'
            });
